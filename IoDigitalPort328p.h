/* 
* IoPort328p.h
*
* Created: 11/30/2014 11:02:38 AM
* Author: Ketil Wright
*
* This program is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/



#pragma once
extern "C"
{
    #include <stdint.h>  
    #include <asf.h>
    #include <gpio.h>
    #include <ioport.h>  
};

typedef struct _IoPortInfo
{
    const uint8_t ioport; // as generated by IOPORT_CREATE_PIN
    const uint8_t pcint;  // mask bit in PCMSKn
    const uint8_t pcie;   // enable bit in PCICR 
    const uint8_t pcmsk;
} IoPortInfo;

// TODO: maybe the isr can pick more info regarding which pin change
/// generated the interrupting condition.
typedef void (*ioportCallback) (void *ctx);

/* tested pins:
    4, 5, 6, 13, 14, 15
 */
class IoPort328p
{
    ioportCallback m_callback;
    void * m_context;
    
public:
    // index into portInfo table
    enum ePin
    {
        pin1,  pin2,  pin3,  pin4,  pin5,  pin6,
        pin9,  pin10, pin11, pin12, pin13, pin14,
        pin15, pin16, pin17, pin18, pin19, nPins 
    };
    
    IoPort328p();
	~IoPort328p();
    void init(ioportCallback callback, void *ctx);
    void configurePin(ePin pin, ioport_direction dir, bool interruptEnable);
    void enableInterrupt(ePin pin, bool  interruptEnable );
    bool pinIsHigh(ePin pin);
    void setPin(ePin pin, bool high);
    void callback(); // for ISR callbacks
    
};

extern IoPort328p ioport;